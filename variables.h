/*==================================================================================================
PROGRAMMER:				David Wine, Joshua Stark
COURSE:					CSC 525/625
FOLDER IDS:				Wine123, Stark1222
CONTRIBUTIONS:			David Wine (50%): A large portion of event driven programming,
							display screens, pixel maps, ship, bomb, grid, splash screen
							contributions same as homework 3 (largely unchanged), a lot of
							the code in main display callback for game.
						Joshua Stark (50%): Centipede, mushrooms, bitmaps, collision detection,
							3D stroke text, splash screen contributions same as homework 3
							(largely unchanged)
MODIFIED BY:			N/A
LAST MODIFIED DATE:	    Dec. 6, 2014
DESCRIPTION:			Advertisement/Demo for game called Centipede Bomber. Starts with splash
							screen, click to go into main window. Main window starts with
							instructions for how to play, then click again to actually play game.
							Once playing game there is a center window with actual gameplay, and
							side panels with a message stating game is a demo. There is also a
							game lost screen, a next level screen, a win screen, and a pause screen
NOTES:					Speed will work differently on some computers (mainly those with dedicated
							graphics cards it seems), centipede movement down can seem a little
							jagged or disconnected
FILES:					csc525Project.cpp, splash.cpp, game.cpp, events.cpp,csc525Project.h,
							splash.h, game.h, events.h, variables.h
IDE/COMPILER:			MicroSoft Visual Studio 2013
INSTRUCTION FOR COMPILATION AND EXECUTION:
1.		Double click on termProject.sln	to OPEN the project
2.		Press Ctrl+F7					to COMPILE
3.		Press Ctrl+Shift+B				to BUILD (COMPILE+LINK)
4.		Press Ctrl+F5					to EXECUTE
==================================================================================================*/

#include <GL/glut.h>
#include <time.h>
using namespace std;

//Various booleans and numbers for external use
extern int mainwindow;
extern int gamewindow;
extern int MainWidth;
extern int MainHeight;
extern int gameWidth;
extern int gameHeight;
extern int splashId;
extern int mouseButton;
extern int shipX, shipY;
extern float bombX, bombY;
extern bool bombShot;
extern bool hit;
extern bool blown;
extern int explode;
extern int segmentNum;
extern int winNum;
extern bool lost;
extern bool won;
extern bool reset;
extern bool started;
extern bool paused;
extern double angle;
double d;//initializing variable
const double pi = 3.14159265; //pi constant
const GLfloat xcor1 = -130.0;
const GLfloat ycor1 = 100.0;

//Pixel maps
extern GLfloat picture[159][318][3]; //Centipede picture pixel map
extern GLfloat bombPic[24][24][4]; //Bomb pixel map (transparent background)
extern GLfloat explosionPic[72][72][4]; //Explosion pixel map (transparent background)
extern GLfloat skullPic[300][300][4]; //Skull pixel map
extern GLfloat levelPic[238][450][4]; //Level up pixel map
extern GLfloat winPic[230][300][4]; //You win pixel map

//24 BITMAP PATTERN
GLubyte mushroompattern2[] = { 
0x00, 0x00, 0x00,
0x00, 0x00, 0x00,
0x01, 0xFF, 0x00,
0x01, 0xFF, 0x00,
0x01, 0xFF, 0x00,
0x01, 0x83, 0x00,
0x01, 0x83, 0x00,
0x01, 0x83, 0x00,
0x01, 0x83, 0x00,
0x01, 0x83, 0x00,
0x3F, 0xFF, 0xF8,
0x3F, 0xFF, 0xF8,
0x38, 0x00, 0x38,
0x38, 0x00, 0x38,
0x38, 0x00, 0x38,
0x38, 0x00, 0x38,
0x38, 0x00, 0x38,
0x3E, 0x00, 0xF8,
0x0E, 0x00, 0xF0,
0x0E, 0x00, 0xF0,
0x03, 0xFF, 0xC0,
0x03, 0xFF, 0xC0,
0x03, 0xFF, 0xC0,
0x00, 0x00, 0x00}; //Bitmap to draw mushrooms



//32 BIT PATTERN
GLubyte mushroompattern[] = { 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,  //4
0x00, 0xFF, 0xFF, 0x80,
0x00, 0xC0, 0x03, 0x00,
0x00, 0xC0, 0x03, 0x00,
0x00, 0xC0, 0x03, 0x00, //First 4
0x00, 0xC7, 0xC3, 0x00,
0x00, 0xC7, 0xC3, 0x00,
0x00, 0xC7, 0xC3, 0x00,
0x00, 0xC7, 0xC3, 0x00,//Next 4
0x1F, 0xC7, 0xC3, 0xF8,
0x10, 0x00, 0x00, 0x18,
0x10, 0x00, 0x00, 0x18,
0x10, 0x00, 0x00, 0x18,//Next 4
0x11, 0xFF, 0xFF, 0x18,
0x11, 0xFF, 0xFF, 0x18,
0x11, 0xFF, 0xFF, 0x18,
0x11, 0xFF, 0xFF, 0x18,//Next 4
0x11, 0xFF, 0xFF, 0x18,
0x11, 0xFF, 0xFF, 0x18,
0x18, 0x3F, 0xF8, 0x18,
0x18, 0x3F, 0xF8, 0x18,//Next 4
0x06, 0xC0, 0x00, 0xE0,
0x03, 0xC0, 0x07, 0x80,
0x01, 0xFF, 0xFF, 0x80,
0x00, 0x00, 0x00, 0x00,//Next 4
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,//Next 4
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00 }; //Bitmap to draw mushrooms

//Stipple for ship
GLubyte shipStip[] = {
	0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77,
	0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA,
	0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77,
	0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA,
	0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77,
	0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA,
	0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77,
	0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA,
	0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77,
	0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA,
	0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77,
	0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA,
	0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77,
	0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA,
	0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77,
	0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA, 0x77, 0xAA };